

import java.io.IOException;

import java.util.HashMap;

import java.util.Map;

import java.util.TreeMap;


import org.apache.hadoop.conf.Configuration;

import org.apache.hadoop.fs.Path;

import org.apache.hadoop.io.IntWritable;

import org.apache.hadoop.io.Text;

import org.apache.hadoop.mapreduce.Job;

import org.apache.hadoop.mapreduce.Mapper;

import org.apache.hadoop.mapreduce.Reducer;

import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;

import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;


public class test2 {


    public static class TagMapper extends Mapper<Object, Text, Text, Text> {


        private Text userId = new Text();

        private Text tag = new Text();


        @Override

        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {

            String[] parts = value.toString().split(",");

            if (parts.length == 4) {

                userId.set(parts[0]);

                tag.set(parts[2]);

                context.write(userId, tag);

            }

        }

    }


    public static class TagReducer extends Reducer<Text, Text, Text, Text> {


        @Override

        public void reduce(Text key, Iterable<Text> values, Context context)

                throws IOException, InterruptedException {

            Map<String, Integer> tagCountMap = new HashMap<>();


            for (Text val : values) {

                String tag = val.toString();

                tagCountMap.put(tag, tagCountMap.getOrDefault(tag, 0) + 1);

            }


            TreeMap<Integer, String> sortedMap = new TreeMap<>();

            for (Map.Entry<String, Integer> entry : tagCountMap.entrySet()) {

                sortedMap.put(entry.getValue(), entry.getKey());

            }


            String mostUsedTag = sortedMap.isEmpty() ? "No Tag" : sortedMap.lastEntry().getValue();

            context.write(key, new Text(mostUsedTag));

        }

    }


    public static void main(String[] args) throws Exception {

        Configuration conf = new Configuration();

        Job job = Job.getInstance(conf, "user tag preference");

        job.setJarByClass(test2.class);

        job.setMapperClass(TagMapper.class);

        job.setReducerClass(TagReducer.class);

        job.setOutputKeyClass(Text.class);

        job.setOutputValueClass(Text.class);

        FileInputFormat.addInputPath(job, new Path(args[0]));

        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        System.exit(job.waitForCompletion(true) ? 0 : 1);

    }

}



