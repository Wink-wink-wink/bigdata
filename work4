
import java.io.BufferedReader;



import java.io.FileReader;



import java.io.IOException;



import java.util.HashMap;



import java.util.Map;





import org.apache.hadoop.conf.Configuration;



import org.apache.hadoop.fs.Path;



import org.apache.hadoop.io.FloatWritable;



import org.apache.hadoop.io.LongWritable;



import org.apache.hadoop.io.Text;



import org.apache.hadoop.mapreduce.Job;



import org.apache.hadoop.mapreduce.Mapper;



import org.apache.hadoop.mapreduce.Reducer;



import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;



import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;





public class test4 {





public static class MovieMapper extends Mapper<LongWritable, Text, Text, FloatWritable> {





private Map<String, String> movieGenresMap = new HashMap<>();



private Text movieGenres = new Text();



private FloatWritable rating = new FloatWritable();





@Override



protected void setup(Context context) throws IOException, InterruptedException {



// Load movie genres data into HashMap



try (BufferedReader br = new BufferedReader(new FileReader("/home/zhenqiang/ml-32m/movies0.txt"))) {



String line;



while ((line = br.readLine()) != null) {



String[] fields = line.split("\t");



if (fields.length == 3) {



movieGenresMap.put(fields[0], fields[2]);



}



}



}



}





public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {



String[] fields = value.toString().split("\\s+");



if (fields.length == 4) {



String movieId = fields[1];



String genres = movieGenresMap.get(movieId);



if (genres != null) {



float ratingValue = Float.parseFloat(fields[2]);



movieGenres.set(genres);



rating.set(ratingValue);



context.write(movieGenres, rating);



}



}



}



}





public static class RatingReducer extends Reducer<Text, FloatWritable, Text, FloatWritable> {





private FloatWritable averageRating = new FloatWritable();





public void reduce(Text key, Iterable<FloatWritable> values, Context context)



throws IOException, InterruptedException {



float sum = 0;



int count = 0;



// Calculating sum and count of ratings



for (FloatWritable val : values) {



sum += val.get();



count++;



}



// Calculating average rating



float avg = sum / count;



averageRating.set(avg);



context.write(key, averageRating);



}



}





public static void main(String[] args) throws Exception {



Configuration conf = new Configuration();



Job job = Job.getInstance(conf, "popular movie genres");



job.setJarByClass(test4.class);



job.setMapperClass(MovieMapper.class);



job.setCombinerClass(RatingReducer.class);



job.setReducerClass(RatingReducer.class);



job.setOutputKeyClass(Text.class);



job.setOutputValueClass(FloatWritable.class);



FileInputFormat.addInputPath(job, new Path(args[0]));



FileOutputFormat.setOutputPath(job, new Path(args[1]));



System.exit(job.waitForCompletion(true) ? 0 : 1);



}



}





